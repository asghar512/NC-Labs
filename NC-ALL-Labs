lab 1
======================================================
import math as m
x=2
h=0.3

x=float(x)
h=float(h)

def f(x):
    return m.sqrt(x) - m.cos(x)
Av=((f(x+h))-(f(x)))/h

def f(x):
    return m.sqrt(x) - m.cos(x)

def ff(x):
    return m.sin(x) + (1 /( 2 * (m.sqrt(x))))

def te():
    e=ff(x)-Av
    return e

print(f(2))
print(ff(2))    
print(Av)
print(te())

==================================================================
lab 2
===================================================================
import sympy as s

x=s.Symbol('x')
a=3
fx=4*x**2
fa=4*a**2
print(fx)
print(fa)
ans=fx-fa
print(ans)
ans1=x-a
f=ans/ans1
print(f)
f=s.limit(f,x,a)
print("result",f)

==========================================================
lab 3
===========================================================

def f(x):
    return x**3 - 0.165*x**2 + 0.0003993

# Implementing Bisection Method
def bisection(x0,x1,e):
    step = 1
    condition = True
    while condition:
        x2 = (x0 + x1)/2
        print('Iteration-%d, x = %0.4f and f(x) = %0.4f' % (step, x2, f(x2)))

        if f(x0) * f(x2) < 0:
            x1 = x2
        else:
            x0 = x2
        
        step = step + 1
        condition = abs(f(x2)) > e
    print('Required Root is : %0.4f' % x2)

e = input('Value Of Tolerable Error: ')

x0 = float(0)
x1 = float(1)
e = float(e)

if f(x0) * f(x1) > 0.0:
    print('Try Again with different initial guess values.')
else:
    bisection(x0,x1,e)
===================================================================
task 2
================================================================
import sympy as sp

def f(x):
    return sp.cos(x)-1.3*(x)
def RegulaFalsi(xu,xl):
    for i in range (10):
        xr = ((xu*f(xl)-xl*f(xu))/(f(xl)-f(xu)))
        if f(xl)*f(xr)<0:
            xu=xr
        else:
            xl=xr
        if abs(f(xr))>0.001:
            print(xr)
        else:
            break;
        print(xr)

xu=float(1)
xl=float(2)
RegulaFalsi(xu,xl)
================================================================
lab 4
=================================================================

import sympy as sp

def f(x):
    return x**3 - 0.165*x**2 + 0.0003993

def secant(x0,x1):
    cond=1
    x2=((x0*f(x1)-x1*f(x0))/(f(x1)-f(x0)))
    while abs(f(x2))>0.001:
        x2=((x0*f(x1)-x1*f(x0))/(f(x1)-f(x0)))
        if f(x1)*f(x2)<0:
            x0=x1
            x1=x2
        else:
            x1=x2
        cond=cond+1

    print('Iteration-%d, x = %0.4f and f(x) = %0.4f' % (cond, x2, f(x2)))

x0=float(0)
x1=float(1)

secant(x0,x1)

==============================================================
lab 5
================================================================
import math as ma

def f(x):
    return x**3 - 0.165*x**2 + 0.0003993

def g(x):
    return 2*x**2 - 0.33*x 

def NRM(x0):
    count=1
    while count<10:
        xr=x0-f(x0)/g(x0)
        x0=xr
        if abs(f(xr))>0.01:
            print(xr)
        else:
            break
        count=count+1
    print(xr)

x0=float(0.5)
NRM(x0)

=============================================================
lab 6
=============================================================

import math as ma

def f(x):
    return 3*(x+1)*(x-(1/2))*(x-1)

def muller(x0,x1,x2,e):
    count = 1
    iteration = 0
    while count < 3:
        d1 = f(x0) - f(x2)
        d2 = f(x1) - f(x2)
        c = f(x1)
        h1 = x0 - x2
        h2 = x1 - x2
        A = (((h1*d2)-(h2*d1))/((h1*h2)*(x1-x0)))
        B = (((d2*ma.pow(h1,2))-(d1*ma.pow(h2,2)))/((h1*h2)*(x0-x1)))
        x = ((2*c)/(B+ma.sqrt(B*B-4*A*c)))
        y = ((2*c)/(B-ma.sqrt(B*B-4*A*c)))
        if B>0:
            xr = x1 - x
        else:
            xr = x1 - y

        if(xr<x1):
            x0 = x1
            x1 = xr
        else:
            x2 = x1
            x1 = xr
        count = count + 1
        if abs(xr)>e:
            iteration = iteration + 1
            print("Iteration %d: ,X2 %0.4f:, X0 %0.4f:, X1 %0.4f:"%(iteration,x2,x0,x1))
        else:
            break
    print("Requried root is %0.4f: "%xr)


x0 = float(1.9)
x1 = float(2)
x2 = float(2.1)
e = float(input("Enter Tolerable Error : "))

muller(x0,x1,x2,e)

==============================================================
lab 7
==============================================================

x=[[5,2,3],[1,2,7]]
y=[[6,7,-2],[3,5,19]]
ans=[[0,0,0],[0,0,0]]
for i in range(len(x)):
    for j in range(len(x[0])):
        ans[i][j]=x[i][j]+y[i][j]
print("Addition")
for i in ans:
    print(i)
=====================================
2
=====================================
x=[[5,2,3],[1,2,7]]
y=[[6,7,-2],[3,5,19]]
ans=[[0,0,0],[0,0,0]]
for i in range(len(x)):
    for j in range(len(x[0])):
        ans[i][j]=x[i][j]-y[i][j]
print("Subtraction")
for i in ans:
    print(i)

=======================================
3
=======================================
x=[[5,2,3],[1,2,7]]
y=[[3,-2],[5,-8],[9,-10]]
ans=[[0,0],[0,0]]
for i in range(len(x)):
    for j in range(len(y[0])):
        for k in range(len(y)):
            ans[i][j] += x[i][k]*y[k][j]
print("Multiplication")
for i in ans:
    print(i)

=============================================
4
============================================
x=[[5,2,3],[1,2,7]]
ans=[[0,0,0],[0,0,0]]
for i in range(len(x)):
    for j in range(len(x[0])):
        ans[i][j]=x[i][j]*2
print("Scalar")
for i in ans:
    print(i)
====================================================================
lab 8
================================================================
def X(y,z):
    return ((95 - 11*y + 4*z)/83)
def Y(x,z):
    return ((104 - 7*x - 13*z)/52)
def Z(x,y):
    return ((71 - 3*x - 8*y)/29)
x=0
y=0
z=0

for i in range(5):
    print(X(y,z))
    print(Y(x,z))
    print(Z(x,y))
    a=X(y,z)
    b=Y(x,z)
    c=Z(x,y)
    x=a
    y=b
    z=c
    print(" ")

print(X(y,z))
print(Y(x,z))
print(Z(x,y))

========================================================================
lab 10
=====================================================================
def fx(y,z):
    x=(40-2*y-3*z)/13
    return x
def fy(x,z):
    y=(33-2*x-z)/15
    return y
def fz(x,y):
    z=(25-x+y)/10
    return z
x=1
y=2
z=5
e=float(input("Enter Tolerance : "))
cond=True
while cond:
    x1=fx(y,z)
    y1=fy(x,z)
    z1=fz(x,y)
    e1=abs(x-x1)
    e2=abs(y-y1)
    e3=abs(z-z1)
    cond+=1
    x=x1
    y=y1
    z=z1
    cond=e1>e and e2>e and e3>e

print("value of x=%0.4f,value of y=%0.4f,value of z=%0.4f"%(x,y,z))
v1=x*25+y*5+z
print("velocity at 5 : ",v1)
v2=x*64+y*8+z
print("velocity at 8 : ",v2)
v3=x*144+y*12+z
print("velocity at 12 : ",v3)

=====================================================================
lab 12
=========================================================================
import numpy as np

n=int(input('Enter no of data : '))

x=np.zeros((n))
fx=np.zeros((n))

for i in range(n):
    x[i]=float(input('x' + str(i) + ' '))
print('===============================================')
for i in range(n):
    fx[i]=float(input('fx' + str(i) + ' '))
xi=float(input('Enter the interpolation point : '))
fresult=0
for i in range(n):
    ans=1
    for j in range(n):
        if i!=j:
            ans=ans*(xi-x[j])/(x[i]-x[j])
    fresult=fresult+ans*fx[i]

print("Value of fx is : ",fresult)

=======================================================================================

lab 13
============================


import numpy as np
def mval(i,value,x):
    pro = 1
    for j in range(i):
        pro = pro * (value-x[j]);
    return pro;

def NewtonDDiff(x,y,n):
    for i in range(1,n):
        for j in range(n-i):
            y[j][i] = ((y[j+1][i-1] - y[j][i-1]) / (x[i+j] - x[j]));
    return y;

def interpolval(value,x,y,n):
    sum = y[0][0];
    for i in range(1,n):
        sum = sum + (mval(i,value,x)*y[0][i]);
    return sum;

def printmatrix(y,n):
    for i in range(n):
        for j in range(n-i):
            print(round(y[i][j],5),"\t",end="");
        print(" ");
        
n = 5;
y = [[0 for i in range(10)]
        for j in range(10)];
x = [0, 10, 15, 20, 22.5];

y[0][0]=0;
y[1][0]=227.04;
y[2][0]=362.78;
y[3][0]=517.35;
y[4][0]=602.97;


y=NewtonDDiff(x,y,n);

printmatrix(y,n);

value = 11;
value2=16;
delta=round(interpolval(value2,x,y,n)-round(interpolval(value,x,y,n),4),4)

print("\nValue at : ",value,"is",delta);
#print("\nValue at : ",value,"is",round(interpolval(value,x,y,n),4));

print('acceleration', delta/16);


============================
lab 14
============================


import math as ma
import scipy.integrate as s

def f(x):
    return 300*x / (1+(ma.exp(x)))

def y(x):
    return 300*x / (1+(ma.exp(x)))

def tripozadal(lower,upper,interval):
    h=(upper-lower)/interval
    ans=0
    for i in range(1,interval):
        x=i*h
        ans = ans+2*y(x)
    ans=ans+y(lower)+y(upper)
    ans=ans*(h/2)
    print("Appro value ",ans)
    integral = s.quad(y,0,6)
    tv = integral[0]
    print("true value : ",tv)
    te = tv - ans
    print("True error is : ",te)
    ste = abs(te / tv)
    print("Absolute true error is : ",ste)
    
tripozadal(0,10,6)



==================================
lab 15
==================================


import math as ma
import scipy.integrate as s

def f(x):
    return 300*x / (1+(ma.exp(x)))

def y(x):
    return 300*x / (1+(ma.exp(x)))

def simpson(lower,upper,interval):
    h=(upper-lower)/interval
    ans=0
    for i in range(1,interval):
        x=i*h
        if i%2==0:
            ans = ans+2*y(x)
        else:
            ans = ans+4*y(x)
    ans=ans+y(lower)+y(upper)
    ans=ans*(h/3)
    print("Appro value ",ans)
    integral = s.quad(y,0,10)
    tv = integral[0]
    print("true value ",tv)
    te = tv - ans
    print("true error ",te)
    ste = abs(te / tv)
    print("Absolute true error is ",ste)
    
simpson(0,10,6)
